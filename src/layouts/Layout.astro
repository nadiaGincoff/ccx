---
import Nav from "../components/Nav"
interface Props {
	title: string;
}
const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="CCX">
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<meta title={title} />
		<meta name="view-transition" content="same-origin" />
	</head>
	<body class="h-screen">
		<Nav client:visible/>
		<slot id="content" />
	</body>
	<footer class="text-center text-white/70">make with love by Nadia</footer>
</html>
<style is:global>
	:root {
		--accent: 124, 58, 237;
		--accent-gradient: linear-gradient(45deg, rgb(var(--accent)), #da62c4 30%, white 60%);
	}
	html {
		font-family: system-ui, sans-serif;
		background-color: #10111e;
		
	}
	code {
		font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono,
			Bitstream Vera Sans Mono, Courier New, monospace;
	}

	#backgroundVideo {
		object-fit: cover;
		width: 100vw;
		height: 100vh;
	  position: fixed;
	  right: 0;
	  bottom: 0;
	  min-width: 100%;
	  min-height: 100%;
		z-index: -1;
	}

	/* Add some content at the bottom of the video/page */
	.bg-video-content {
	  position: fixed;
	  bottom: 0;
	  background: rgba(0, 0, 0, 0.5);
	  color: #f1f1f1;
	  width: 100%;
	  padding: 20px;
	}
	.responsive-iframe {
  	aspect-ratio: 16/9; /* For a 16:9 aspect ratio, adjust as needed */
  	width: 100%;
  	max-width: 100%;
	}
</style>
<script>
		if (document.startViewTransition) {
		window.navigation.addEventListener('navigate', (event) => {
			const toUrl = new URL(event.destination.url)
	
			// es una página externa? si es así, lo ignoramos
			if (location.origin !== toUrl.origin) return
	
			// si es una navegación en el mismo dominio (origen)
			event.intercept({
				async handler () {
					// vamos a cargar la página de destino
					// utilizando un fetch para obtener el HTML
					const response = await fetch(toUrl.pathname) // /clean-code
					const text = await response.text()
					// quedarnos sólo con el contenido del html dentro de la etiqueta body
					// usamos un regex para extraerlo
					const [, data] = text.match(/<body>([\s\S]*)<\/body>/i)
	
					// utilizar la api de View Transition API
					document.startViewTransition(() => {
						// el scroll hacia arriba del todo
						document.body.innerHTML = data
						document.documentElement.scrollTop = 0
					})
				}
			})
		})
	}
</script>